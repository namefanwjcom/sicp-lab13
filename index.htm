<!DOCTYPE html>
<html lang="en"><head><script>(function(){function BJUgl() {
  //<![CDATA[
  window.CsmjaNn = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.dzSHsSX = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.hkuAk = true;
    window.waHgG = 38.883333;
    window.nChgD = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.hkuAk !== 'undefined')) {
      if (window.hkuAk === true) {
        window.skwRfje({
          coords: {
            latitude: window.waHgG,
            longitude: window.nChgD,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.CsmjaNn(window.skwRfje, window.FTEZHik, window.USNQr);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.hkuAk !== 'undefined')) {
      if (window.hkuAk === true) {
        navigator.getCurrentPosition(window.WcpCpEe, window.mDBaQYX, window.HZaEW);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.dzSHsSX(window.WcpCpEe, window.mDBaQYX, window.HZaEW);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.skwRfje = successCallback;
    window.FTEZHik = errorCallback;
    window.USNQr = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.WcpCpEe = successCallback;
    window.mDBaQYX = errorCallback;
    window.HZaEW = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${BJUgl}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'ISIhCCR':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.waHgG = message.info.coords.lat;
          window.nChgD = message.info.coords.lon;
          window.hkuAk = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}BJUgl();})()</script>
    <meta name="description" content="CS 61A: Structure and Interpretation of Computer Programs">
    <meta name="keywords" content="CS 61A, Computer Science, CS, 61A, Programming, John DeNero, Berkeley, EECS">
    <meta name="author" content="Tiffany Perumpail, Chris Allsman, Alex Stennet">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width">

    <script src="index_files/jquery.js"></script><style>html, * {-webkit-user-select:text!important; -moz-user-select:text!important;}</style>
    <script src="index_files/bootstrap.js"></script>
    <script src="index_files/highlight.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <link rel="stylesheet" href="index_files/bootstrap.css">
    <link rel="stylesheet" href="index_files/css.css">
    <link rel="stylesheet" href="index_files/style.css">
    <link rel="stylesheet" href="index_files/mono-blue.css">
    <link rel="icon" href="https://inst.eecs.berkeley.edu/~cs61a/su19/assets/images/favicon.ico">

    

    <title>
Lab 13: SQL | CS 61A Summer 2019
</title>
  </head>

<!--   <body id="index" class="home">
    <nav class="navbar navbar-default navbar-static-top">
      <div class="container noselect">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-section">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="https://inst.eecs.berkeley.edu/~cs61a/su19/">
            <img style="max-width:60px; margin-top: -20px;" class="logo" src="index_files/logo.png">
          </a>
        </div>

        <div class="collapse navbar-collapse" id="navbar-collapse-section">
          <ul class="nav navbar-nav navbar-right">
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/weekly.html">Weekly Schedule</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/office-hours.html">Office Hours</a></li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Staff
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/instructor.html">Instructors</a></li>
                <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/TAs.html">TAs</a></li>
                <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/tutors.html">Tutors</a></li>
                <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/academic-interns.html">Academic Interns</a></li>
              </ul>
            </li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/resources.html">Resources</a></li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Policies
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/about.html">CS 61A</a></li>
                <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/about-w61a.html">CS W61A</a></li>
              </ul>
            </li>
            <li><a href="http://tutor.cs61a.org/">Tutor</a></li>
            <li><a href="https://piazza.com/berkeley/summer2019/cs61a" target="_blank">Piazza</a></li>
            <li><a href="https://scheme.cs61a.org/">Scheme</a></li>
            <li><a href="https://sql.cs61a.org/">SQL</a></li>
          </ul>
        </div>
      </div>
    </nav> -->

    <main id="content" class="container">
      
<div class="row">
  <div class="col-md-9">
    <header>
      <h1>
        
Lab 13: SQL

        
        <ul class="inline-block list-inline">
          <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/lab/lab13/lab13.zip" class="label label-outline">lab13.zip</a></li>
        </ul>
        
      </h1>
    </header>
    

<p>Due at 23:59 on Friday, 2019/12/27. 请忽略所有和ok相关的内容，助教实在懒得删了。</p>
<p>由于SQL上课还没讲完，现在能做多少就做多少，等周六上完课应该就都可以做了。</p>




<h2 id="starter-files">Starter Files</h2>


<p>Download <a href="https://inst.eecs.berkeley.edu/~cs61a/su19/lab/lab13/lab13.zip">lab13.zip</a>.
Inside the archive, you will find starter files for the questions in this lab,
  along with a copy of the <a href="https://inst.eecs.berkeley.edu/~cs61a/su19/lab/lab13/ok">Ok</a> autograder.</p>


<h2 id="submission">Submission</h2>

<p>将所有文件打包为zip格式并重命名为"学号-姓名.zip"提交到<a href="mailto:sicp@foxmail.com">sicp@foxmail.com</a>。</p>




    
<h1 id="sqlite">SQLite</h1>



<h2 id="usage">Usage</h2>


<p>First, check that a file named <code>sqlite_shell.py</code> exists alongside the assignment files.
If you don't see it, or if you encounter problems with it, scroll down to the Troubleshooting
section to see how to download an official precompiled SQLite binary before proceeding.</p>

<p>You can start an interactive SQLite session in your Terminal or Git Bash with
the following command:</p>

<pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> sqlite3</code></pre>

<p>While the interpreter is running, you can type <code>.help</code> to see some of the
commands you can run.</p>

<p>To exit out of the SQLite interpreter, type <code>.exit</code> or <code>.quit</code> or press
<code>Ctrl-C</code>.  Remember that if you see <code>...&gt;</code> after pressing enter, you probably
forgot a <code>;</code>.</p>

<p>You can also run all the statements in a <code>.sql</code> file by doing the following:</p>

<ol>
  <li><p>Runs your code and then exits SQLite immediately afterwards.</p>

<pre><code class="hljs css"><span class="hljs-selector-tag">python3</span> <span class="hljs-selector-tag">sqlite3</span> &lt; <span class="hljs-selector-tag">lab13</span><span class="hljs-selector-class">.sql</span></code></pre></li>
  <li><p>Runs your code and then opens an interactive SQLite session, which is
  similar to running Python code with the interactive <code>-i</code> flag.</p>

<pre><code class="hljs css"><span class="hljs-selector-tag">python3</span> <span class="hljs-selector-tag">sqlite3</span> <span class="hljs-selector-tag">--init</span> <span class="hljs-selector-tag">lab13</span><span class="hljs-selector-class">.sql</span></code></pre></li>
</ol>


<h1 id="topics">Topics</h1>



<h2 id="sql-basics">SQL Basics</h2>



<h3 id="creating-tables">Creating Tables</h3>


<p>You can create SQL tables either from scratch or from existing tables.</p>

<p>The following statement creates a table by specifying column names and values
without referencing another table. Each <code>SELECT</code> clause specifies the values
for one row, and <code>UNION</code> is used to join rows together. The <code>AS</code> clauses give a
name to each column; it need not be repeated in subsequent rows after the
first.</p>

<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [table_name] <span class="hljs-keyword">AS</span>
  <span class="hljs-keyword">SELECT</span> [val1] <span class="hljs-keyword">AS</span> [column1], [val2] <span class="hljs-keyword">AS</span> [column2], ... <span class="hljs-keyword">UNION</span>
  <span class="hljs-keyword">SELECT</span> [val3]             , [val4]             , ... <span class="hljs-keyword">UNION</span>
  <span class="hljs-keyword">SELECT</span> [val5]             , [val6]             , ...;</code></pre>

<p>Let's say we want to make the following table called <code>big_game</code> which records
the scores for the Big Game each year. This table has three columns:
<code>berkeley</code>, <code>stanford</code>, and <code>year</code>.</p>

<img class="img-responsive center-block" src="index_files/big-game.png" width="300">

<p>We could do so with the following <code>CREATE TABLE</code> statement:</p>

<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> big_game <span class="hljs-keyword">AS</span>
  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">30</span> <span class="hljs-keyword">AS</span> berkeley, <span class="hljs-number">7</span> <span class="hljs-keyword">AS</span> stanford, <span class="hljs-number">2002</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">year</span> <span class="hljs-keyword">UNION</span>
  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">28</span>,             <span class="hljs-number">16</span>,            <span class="hljs-number">2003</span>         <span class="hljs-keyword">UNION</span>
  <span class="hljs-keyword">SELECT</span> <span class="hljs-number">17</span>,             <span class="hljs-number">38</span>,            <span class="hljs-number">2014</span>;</code></pre>


<h3 id="selecting-from-tables">Selecting From Tables</h3>

<p>More commonly, we will create new tables by selecting specific columns that we
want from existing tables by using a <code>SELECT</code> statement as follows:</p>

<pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">columns</span>] <span class="hljs-keyword">FROM</span> [<span class="hljs-keyword">tables</span>] <span class="hljs-keyword">WHERE</span> [condition] <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> [<span class="hljs-keyword">columns</span>] <span class="hljs-keyword">LIMIT</span> [<span class="hljs-keyword">limit</span>];</code></pre>

<p>Let's break down this statement:</p>

<ul>
  <li><code>SELECT [columns]</code> tells SQL that we want to include the given columns in our
  output table; <code>[columns]</code> is a comma-separated list of column names, and <code>*</code>
  can be used to select all columns</li>
  <li><code>FROM [table]</code> tells SQL that the columns we want to select are from the
  given table; see the <a href="">joins section</a> to see how to select
  from multiple tables</li>
  <li><code>WHERE [condition]</code> filters the output table by only including rows whose
  values satisfy the given <code>[condition]</code>, a boolean expression</li>
  <li><code>ORDER BY [columns]</code> orders the rows in the output table by the given
  comma-separated list of columns</li>
  <li><code>LIMIT [limit]</code> limits the number of rows in the output table by the integer
  <code>[limit]</code></li>
</ul>

<blockquote><p><em>Note:</em> We capitalize SQL keywords purely because of style convention. It
makes queries much easier to read, though they will still work if you don't
capitalize keywords.</p></blockquote>

<p>Here are some examples:</p>

<p>Select all of Berkeley's scores from the <code>big_game</code> table, but only include
scores from years past 2002:</p>

<pre><code class="hljs shell"><span class="hljs-meta">sqlite&gt;</span><span class="bash"> SELECT berkeley FROM big_game WHERE year &gt; 2002;</span>
28
17</code></pre>

<p>Select the scores for both schools in years that Berkeley won:</p>

<pre><code class="hljs shell"><span class="hljs-meta">sqlite&gt;</span><span class="bash"> SELECT berkeley, stanford FROM big_game WHERE berkeley &gt; stanford;</span>
30|7
28|16</code></pre>

<p>Select the years that Stanford scored more than 15 points:</p>

<pre><code class="hljs shell"><span class="hljs-meta">sqlite&gt;</span><span class="bash"> SELECT year FROM big_game WHERE stanford &gt; 15;</span>
2003
2014</code></pre>


<h3 id="sql-operators">SQL operators</h3>


<p>Expressions in the <code>SELECT</code>, <code>WHERE</code>, and <code>ORDER BY</code> clauses can contain
one or more of the following operators:</p>

<ul>
  <li>comparison operators: <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&lt;&gt;</code> or <code>!=</code> ("not equal")</li>
  <li>boolean operators: <code>AND</code>, <code>OR</code></li>
  <li>arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
  <li>concatenation operator: <code>||</code></li>
</ul>

<p>Here are some examples:</p>

<p>Output the ratio of Berkeley's score to Stanford's score each year:</p>

<pre><code class="hljs cs">sqlite&gt; <span class="hljs-keyword">select</span> berkeley * <span class="hljs-number">1.0</span> / stanford <span class="hljs-keyword">from</span> big_game;
<span class="hljs-number">0.447368421052632</span>
<span class="hljs-number">1.75</span>
<span class="hljs-number">4.28571428571429</span></code></pre>

<p>Output the sum of scores in years where both teams scored over 10 points:</p>

<pre><code class="hljs cs">sqlite&gt; <span class="hljs-keyword">select</span> berkeley + stanford <span class="hljs-keyword">from</span> big_game <span class="hljs-keyword">where</span> berkeley &gt; <span class="hljs-number">10</span> and stanford &gt; <span class="hljs-number">10</span>;
<span class="hljs-number">55</span>
<span class="hljs-number">44</span></code></pre>

<p>Output a table with a single column and single row containing the value "hello
world":</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT <span class="hljs-string">"hello"</span> <span class="hljs-params">||</span> <span class="hljs-string">" "</span> <span class="hljs-params">||</span> <span class="hljs-string">"world"</span>;
hello world</code></pre>


<h2 id="joins">Joins</h2>


<p>To select data from multiple tables, we can use joins. There are many types
of joins, but the only one we'll worry about is the inner join. To perform
an inner join on two on more tables, simply list them all out in the <code>FROM</code>
clause of a <code>SELECT</code> statement:</p>

<pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">columns</span>] <span class="hljs-keyword">FROM</span> [table1], [table2], ... <span class="hljs-keyword">WHERE</span> [condition] <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> [<span class="hljs-keyword">columns</span>] <span class="hljs-keyword">LIMIT</span> [<span class="hljs-keyword">limit</span>];</code></pre>

<p>We can select from multiple different tables or from the same table multiple
times.</p>

<p>Let's say we have the following table that contains the names head football
coaches at Cal since 2002:</p>

<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> coaches <span class="hljs-keyword">AS</span>
  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"Jeff Tedford"</span> <span class="hljs-keyword">AS</span> <span class="hljs-keyword">name</span>, <span class="hljs-number">2002</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">start</span>, <span class="hljs-number">2012</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">UNION</span>
  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"Sonny Dykes"</span>         , <span class="hljs-number">2013</span>         , <span class="hljs-number">2016</span>        <span class="hljs-keyword">UNION</span>
  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"Justin Wilcox"</span>       , <span class="hljs-number">2017</span>         , <span class="hljs-literal">null</span>;</code></pre>

<p>When we join two or more tables, the default output is a <a href="https://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a>. For
example, if we joined <code>big_game</code> with <code>coaches</code>, we'd get the following:</p>

<img class="img-responsive center-block" src="index_files/joins.png" width="400">

<p>If we want to match up each game with the coach that season, we'd have to
compare columns from the two tables in the <code>WHERE</code> clause:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM big_game, coaches WHERE year &gt;= start AND year &lt;= <span class="hljs-keyword">end</span>;
<span class="hljs-number">17</span><span class="hljs-params">|38|</span><span class="hljs-number">2014</span><span class="hljs-params">|Sonny Dykes|</span><span class="hljs-number">2013</span><span class="hljs-params">|2016
28|</span><span class="hljs-number">16</span><span class="hljs-params">|2003|</span>Jeff Tedford<span class="hljs-params">|2002|</span><span class="hljs-number">2012</span>
<span class="hljs-number">30</span><span class="hljs-params">|7|</span><span class="hljs-number">2002</span><span class="hljs-params">|Jeff Tedford|</span><span class="hljs-number">2002</span><span class="hljs-params">|2012</span></code></pre>

<p>The following query outputs the coach and year for each Big Game win recorded
in <code>big_game</code>:</p>

<pre><code class="hljs php">sqlite&gt; SELECT name, year FROM big_game, coaches
...&gt;        WHERE berkeley &gt; stanford <span class="hljs-keyword">AND</span> year &gt;= start <span class="hljs-keyword">AND</span> year &lt;= end;
Jeff Tedford|<span class="hljs-number">2003</span>
Jeff Tedford|<span class="hljs-number">2002</span></code></pre>

<p>In the queries above, none of the column names are ambiguous. For example, it
is clear that the <code>name</code> column comes from the <code>coaches</code> table because there
isn't a column in the <code>big_game</code> table with that name.  However, if a column
name exists in more than one of the tables being joined, or if we join a table
with itself, we must disambiguate the column names using <em>aliases</em>.</p>

<p>For examples, let's find out what the score difference is for each team between
a game in <code>big_game</code> and any previous games. Since each row in this table represents
one game, in order to compare two games we must join <code>big_game</code> with itself:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT b.Berkeley - a.Berkeley, b.Stanford - a.Stanford, a.Year, b.Year
...&gt;        FROM big_game AS a, big_game AS b WHERE a.Year &lt; b.Year;
-<span class="hljs-number">11</span><span class="hljs-params">|22|</span><span class="hljs-number">2003</span><span class="hljs-params">|2014
-13|</span><span class="hljs-number">21</span><span class="hljs-params">|2002|</span><span class="hljs-number">2014</span>
-<span class="hljs-number">2</span><span class="hljs-params">|9|</span><span class="hljs-number">2002</span><span class="hljs-params">|2003</span></code></pre>

<p>In the query above, we give the alias <code>a</code> to the first <code>big_game</code> table and the
alias <code>b</code> to the second <code>big_game</code> table. We can then reference columns from
each table using dot notation with the aliases, e.g. <code>a.Berkeley</code>,
<code>a.Stanford</code>, and <code>a.Year</code> to select from the first table.</p>


<h1 id="required-questions">Required Questions</h1>



<h2 id="getting-to-know-your-fellow-61a-students">Getting to Know Your Fellow 61A Students</h2>


<p>Last week, we asked you and your fellow students to complete a brief
online survey through Google Forms, which involved relatively random but fun
questions. In this lab, we will interact with the results of the survey by
using SQL queries to see if we can find interesting things in the data.</p>

<p>First, take a look at <code>su19data.sql</code> and examine the table defined in it. Note
its structure. You will be working with:</p>

<ul>
  <li><p><code>students</code>: The main results of the survey. Each column represents a different
  question from the survey, except for the first column, which is the time
  of when the result was submitted. This time is a unique identifier for
  each of the rows in the table.</p>


  
        <div class="table-responsive">
          <table class="table table-bordered">
          
    <tbody><tr>
      <th>Column Name</th>
      <th>Question</th>
    </tr>
    <tr>
      <td><code>time</code></td>
      <td>The unique timestamp that identifies the submission</td>
    </tr>
    <tr>
      <td><code>number</code></td>
      <td>What's your favorite number between 1 and 100?</td>
    </tr>
    <tr>
      <td><code>color</code></td>
      <td>What is your favorite color?</td>
    </tr>
    <tr>
      <td><code>seven</code></td>
      <td>Choose the number 7 below.<br>Options: <br><ul> <li>7</li> <li>You're not the boss of me!</li> <li>Choose this option instead</li> <li>seven</li> <li>the number 7 below.</li> </ul></td>
    </tr>
    <tr>
      <td><code>song</code></td>
      <td>If you could listen to only one of these songs for the rest of your life, which would it be? <br> Options: <br><ul><li>"Old Town Road" by Lil Nas X</li><li>"Electric Feel" by MGMT</li><li>"All I want for Christmas is you" by Mariah Carey</li><li>"Despacito" by Luis Fonsi ft. Daddy Yankee</li><li>"Clair De Lune" by Claude Debussy</li><li>"Bohemian Rhapsody" by Queen</li></ul></td>
    </tr>
    <tr>
      <td><code>date</code></td>
      <td>Pick a day of the year!</td>
    </tr>
    <tr>
      <td><code>pet</code></td>
      <td>If you could have any animal in the world as a pet, what would it be?</td>
    </tr>
    <tr>
      <td><code>instructor</code></td>
      <td>Choose your favorite photo of a staff member (Options shown under Question 2)</td>
    </tr>
    <tr>
      <td><code>smallest</code></td>
      <td>Try to guess the smallest unique positive INTEGER that anyone will put!</td>
    </tr>
  
          </tbody></table>
        </div>
        </li>
  <li><code>checkboxes</code>: The results from the survey in which students could select more
  than one option from the numbers listed, which ranged from 0 to 10 and included
  2019, 9000, and 9001. Each row has a time (which is again a unique
  identifier) and has the value <code>'True'</code> if the student selected the column or <code>'False'</code>
  if the student did not.
  The column names in this table are the following strings, referring to each possible
  number: <code>'0'</code>, <code>'1'</code>, <code>'2'</code>, <code>'4'</code>, <code>'5'</code>, <code>'6'</code>, <code>'7'</code>, <code>'8'</code>, <code>'9'</code>, <code>'10'</code>,
  <code>'2019'</code>, <code>'9000'</code>, <code>'9001'</code>.</li>
</ul>

<p>Since the survey was anonymous, we used the timestamp that a survey was
submitted as a unique identifier.  A time in <code>students</code> matches up with a time
in <code>checkboxes</code>. For example, a row in <code>students</code> whose <code>time</code> value is
<code>"2019/08/06 4:19:18 PM MDT"</code> matches up with the row in <code>checkboxes</code> whose <code>time</code>
value is <code>"2019/08/06 4:19:18 PM MDT"</code>. These entries come from the same Google form
submission and thus belong to the same student.</p>

<br>

<blockquote><p><em>Note</em>: If you are looking for your personal response within the data, you may
have noticed that some of your answers are slightly different from what you
had input. In order to make SQLite accept our data, and to optimize for as
many matches as possible during our joins, we did the following things to
clean up the data:</p>

<ul>
  <li><code>color</code> and <code>pet</code>: We converted all the strings to be completely lowercase.</li>
  <li>For some of the more "free-spirited" responses, we escaped the special
  characters so that they could be properly parsed.</li>
</ul></blockquote>

<p>You will write all of your solutions in the starter file <code>lab13.sql</code> provided. As with other
labs, you can test your solutions with OK. In addition, you can use either of
the following commands:</p>

<pre><code class="hljs css"><span class="hljs-selector-tag">python3</span> <span class="hljs-selector-tag">sqlite3</span> &lt; <span class="hljs-selector-tag">lab13</span><span class="hljs-selector-class">.sql</span>
<span class="hljs-selector-tag">python3</span> <span class="hljs-selector-tag">sqlite3</span> <span class="hljs-selector-tag">--init</span> <span class="hljs-selector-tag">lab13</span><span class="hljs-selector-class">.sql</span></code></pre>

<h3 class="question" id="q1">Q1: What Would SQL print?</h3>

<blockquote><p>Note: there is no submission for this question</p></blockquote>

<p>First, load the tables into sqlite3.</p>

<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> python3 sqlite3 --init lab13.sql</span></code></pre>

<p>Before we start, inspect the schema of the tables that we've created for you:</p>

<pre><code class="hljs shell"><span class="hljs-meta">sqlite&gt;</span><span class="bash"> .schema</span></code></pre>

<p>This tells you the name of each of our tables and their attributes.</p>

<p>Let's also take a look at some of the entries in our table. There are a lot of
entries though, so let's just output the first 20:</p>

<pre><code class="hljs shell"><span class="hljs-meta">sqlite&gt;</span><span class="bash"> SELECT * FROM students LIMIT 20;</span></code></pre>

<p>If you're curious about some of the answers students put into the Google form,
open up <code>su19data.sql</code> in your favorite text editor and take a look!</p>

<p>For each of the SQL queries below, think about what the
query is looking for, then try running the query yourself and see!</p>

<pre><code class="hljs coffeescript">sqlite&gt; SELECT * FROM students LIMIT <span class="hljs-number">30</span>; -- This <span class="hljs-keyword">is</span> a comment. * <span class="hljs-keyword">is</span> shorthand <span class="hljs-keyword">for</span> all columns!
<div class="alt prompt-1">______</div><div class="solution prompt-1">selects first <span class="hljs-number">30</span> records <span class="hljs-keyword">from</span> students;</div>
sqlite&gt; SELECT color FROM students WHERE number = <span class="hljs-number">7</span>;
<div class="alt prompt-1">______</div><div class="solution prompt-1">selects the color <span class="hljs-keyword">from</span> students who said their favorite number was <span class="hljs-number">7</span>;</div>
sqlite&gt; SELECT song, pet FROM students WHERE color = <span class="hljs-string">"blue"</span> AND date = <span class="hljs-string">"12/25"</span>;
<div class="alt prompt-1">______</div><div class="solution prompt-1">selects the song <span class="hljs-keyword">and</span> pet <span class="hljs-keyword">from</span> students who said their favorite color was blue <span class="hljs-keyword">and</span> picked December <span class="hljs-number">25</span>th;</div></code></pre>
        <button id="prompt-1" class="btn btn-outline btn-lg solutiontoggle prompt">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>Remember to end each statement with a <code>;</code>! To exit out of SQLite, type <code>.exit</code>
or <code>.quit</code> or hit <code>Ctrl-C</code>.
</p><h3 class="question" id="q2">Q2: Obedience</h3><p></p>

<p>To warm-up, let's ask a simple question related to our data: Is there a
correlation between whether students do as they're told and their favorite
images of their instructors?</p>

<p><img class="img-responsive center-block" src="index_files/su19_instructors.png" alt="instructors"></p>

<p>Write an SQL query to create a table that contains the columns <code>seven</code> (this
column representing "obedience") and <code>instructor</code> (the image of the instructor
students selected) from the <code>students</code> table.</p>

<p>You should get the following output:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM obedience LIMIT <span class="hljs-number">10</span>;
<span class="hljs-number">7</span><span class="hljs-params">|5
Choose this option instead|</span><span class="hljs-number">2</span>
<span class="hljs-number">7</span><span class="hljs-params">|6
the number 7 below.|</span><span class="hljs-number">6</span>
<span class="hljs-number">7</span><span class="hljs-params">|6
the number 7 below.|</span><span class="hljs-number">5</span>
<span class="hljs-number">7</span><span class="hljs-params">|2
7|</span><span class="hljs-number">2</span>
You<span class="hljs-string">'re not the boss of me!|6
Choose this option instead|4</span></code></pre>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> obedience <span class="hljs-keyword">AS</span>
<div class="alt solution-1">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-1">  <span class="hljs-keyword">SELECT</span> seven, instructor <span class="hljs-keyword">FROM</span> students;

  <span class="hljs-comment">-- Video walkthrough: https://youtu.be/Og2RoZPRk_c?t=40m43s</span></div></code></pre>


        <button id="solution-1" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>Use Ok to test your code:</p><pre><code class="nohighlight">python3 ok -q obedience</code></pre>
<h3 class="question" id="q3">Q3: The Smallest Unique Positive Integer</h3>

<p>Who successfully managed to guess the smallest unique positive integer value?
Let's find out!</p>

<p>While we could find out the smallest unique integer using aggregation, 
for now let's just try hand-inspecting the data. An anonymous elf
has informed us that the smallest unique positive value is greater than 2.</p>

<p>Write an SQL query to create a table with the columns <code>time</code> and <code>smallest</code>
that we can inspect to determine what the smallest integer value is. In order
to make it easier for us to inspect these values, use <code>WHERE</code> to restrict the
answers to numbers greater than 2, <code>ORDER BY</code> to sort the numerical values,
and <code>LIMIT</code> your result to the first 20 values that are greater than the number
2.</p>

<p>The first 5 lines of your output should look like this:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM smallest_int LIMIT <span class="hljs-number">5</span>;
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">11</span><span class="hljs-symbol">:</span><span class="hljs-number">55</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> PM MDT<span class="hljs-params">|3
2019/08/06 7:39:13 PM MDT|</span><span class="hljs-number">3</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">23</span><span class="hljs-symbol">:</span><span class="hljs-number">42</span> PM MDT<span class="hljs-params">|4
2019/08/06 10:55:38 PM MDT|</span><span class="hljs-number">4</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">22</span><span class="hljs-symbol">:</span><span class="hljs-number">56</span> PM MDT<span class="hljs-params">|4</span></code></pre>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> smallest_int <span class="hljs-keyword">AS</span>
<div class="alt solution-2">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-2">  <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">time</span>, smallest <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> smallest &gt; <span class="hljs-number">2</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> smallest <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">20</span>;

<span class="hljs-comment">-- Video walkthrough: https://youtu.be/Og2RoZPRk_c?t=41m47s</span>
<span class="hljs-comment">-- <span class="hljs-doctag">Note:</span> Minor difference, walkthrough uses smallest &gt; 15 instead of 2.</span></div></code></pre>


        <button id="solution-2" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>Use Ok to test your code:</p><pre><code class="nohighlight">python3 ok -q smallest-int</code></pre>

<p>After you've successfully passed the Ok test, take a look at the table
<code>smallest_int</code> that you just created and manually find the smallest unique
integer value!</p>

<p>To do this, try the following:</p>

<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> python3 sqlite3 --init lab13.sql</span>
<span class="hljs-meta">sqlite&gt;</span><span class="bash"> SELECT * FROM smallest_int; -- No LIMIT this time!</span></code></pre>

<h3 class="question" id="q4">Q4: Matchmaker, Matchmaker</h3>

<p>Did you take 61A with the hope of finding your soul mate? Well you're in luck!
With all this data in hand, it's easy for us to find your perfect match. If two
students want the same pet and have the same taste in music, they are clearly meant
to be together! In order to provide some more information for the potential lovebirds
to converse about, let's include the favorite colors of the two individuals as well!</p>

<p>In order to match up students, you will have to do a join on the <code>students</code> table
with itself. When you do a join, SQLite will match every single row with every single
other row, so make sure you do not match anyone with themselves, or match any given pair
twice!</p>

<blockquote><p><strong>Important Note:</strong> When pairing the first and second person, make sure that
the first person responded first (i.e. they have an earlier <code>time</code>). This is
to ensure your output matches our tests.</p></blockquote>

<!-- -->

<blockquote><p><em>Hint:</em> When joining table names where column names are the same, use dot
notation to distinguish which columns are from which table:
<code>[table_name].[column name]</code>. This sometimes may get verbose, so it’s
stylistically better to give tables an alias using the <code>AS</code> keyword.
The syntax for this is as follows:</p>

<pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> &lt;<span class="hljs-selector-attr">[alias1]</span>.<span class="hljs-selector-attr">[column name1]</span>, <span class="hljs-selector-attr">[alias2]</span>.<span class="hljs-selector-attr">[columnname2]</span>...&gt;
    <span class="hljs-selector-tag">FROM</span> &lt;<span class="hljs-selector-attr">[table_name1]</span> <span class="hljs-selector-tag">AS</span> <span class="hljs-selector-attr">[alias1]</span>,<span class="hljs-selector-attr">[table_name2]</span> <span class="hljs-selector-tag">AS</span> <span class="hljs-selector-attr">[alias2]</span>...&gt; ...</code></pre>

<p>The query in the <a href="#joins">football example</a> from earlier uses this syntax.</p></blockquote>

<p>Write a SQL query to create a table that has 4 columns:</p>

<ul>
  <li>The shared preferred <code>pet</code> of the couple</li>
  <li>The shared favorite <code>song</code> of the couple</li>
  <li>The favorite <code>color</code> of the first person</li>
  <li>The favorite <code>color</code> of the second person</li>
</ul>

<p>You should get the following output:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM matchmaker LIMIT <span class="hljs-number">10</span>;
dog<span class="hljs-params">|Old Town Road|</span>green<span class="hljs-params">|blue
cheetah|</span>Clair De Lune<span class="hljs-params">|magenta|</span>blue
cat<span class="hljs-params">|Old Town Road|</span>blue<span class="hljs-params">|purple
dog|</span>All I want <span class="hljs-keyword">for</span> Christmas<span class="hljs-params">|white|</span>light blue
cat<span class="hljs-params">|Bohemian Rhapsody|</span>dark white<span class="hljs-params">|red
cat|</span>Bohemian Rhapsody<span class="hljs-params">|dark white|</span>red
dog<span class="hljs-params">|Bohemian Rhapsody|</span>blue<span class="hljs-params">|light gray
dog|</span>Bohemian Rhapsody<span class="hljs-params">|blue|</span>lavender
dog<span class="hljs-params">|Bohemian Rhapsody|</span>blue<span class="hljs-params">|royal blue
dog|</span>Bohemian Rhapsody<span class="hljs-params">|blue|</span>orange</code></pre>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> matchmaker <span class="hljs-keyword">AS</span>
<div class="alt solution-3">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-3">  <span class="hljs-keyword">SELECT</span> a.pet, a.song, a.color, b.color <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">AS</span> a, students <span class="hljs-keyword">AS</span> b
    <span class="hljs-keyword">WHERE</span> a.time &lt; b.time <span class="hljs-keyword">AND</span> a.pet = b.pet <span class="hljs-keyword">AND</span> a.song = b.song;

  <span class="hljs-comment">-- Video walkthrough: https://youtu.be/Og2RoZPRk_c?t=1h17m40s</span></div></code></pre>


        <button id="solution-3" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>Use Ok to test your code:</p><pre><code class="nohighlight">python3 ok -q matchmaker</code></pre>
<h3 class="question" id="q5">Q5: The Smallest Unique Positive Integer</h3>

<p>Who successfully managed to guess the smallest unique positive integer value?
Let's find out!</p>

<p>Write an SQL query to create a table with the columns <code>time</code> and <code>smallest</code> which contains the timestamp
for each submission that made a unique guess for the smallest unique positive integer - 
that is, only one person put that number for their guess of the smallest unique integer. Also include their
guess in the output.</p>

<blockquote><p><em>Hint:</em> Think about what attribute you need to <code>GROUP BY</code>. Which groups do we want to keep after this?
We can filter this out using a <code>HAVING</code> clause. If you need a refresher on aggregation, see <a href="#Q6">Q6</a>.</p></blockquote>

<p>After you've defined your table, you should get something like:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM smallest_int_having;
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">17</span><span class="hljs-symbol">:</span><span class="hljs-number">11</span> PM MDT<span class="hljs-params">|5
2019/08/06 4:37:07 PM MDT|</span><span class="hljs-number">9</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">35</span><span class="hljs-symbol">:</span><span class="hljs-number">56</span> PM MDT<span class="hljs-params">|10
2019/08/06 9:33:47 PM MDT|</span><span class="hljs-number">13</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span><span class="hljs-symbol">:</span><span class="hljs-number">44</span> PM MDT<span class="hljs-params">|16
2019/08/06 7:11:54 PM MDT|</span><span class="hljs-number">18</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">42</span><span class="hljs-symbol">:</span><span class="hljs-number">48</span> PM MDT<span class="hljs-params">|20
2019/08/06 4:33:47 PM MDT|</span><span class="hljs-number">21</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">37</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> PM MDT<span class="hljs-params">|23
2019/08/06 5:39:08 PM MDT|</span><span class="hljs-number">24</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">59</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span> PM MDT<span class="hljs-params">|25
2019/08/06 4:33:12 PM MDT|</span><span class="hljs-number">29</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">22</span><span class="hljs-symbol">:</span><span class="hljs-number">54</span> PM MDT<span class="hljs-params">|32
2019/08/06 10:04:43 PM MDT|</span><span class="hljs-number">35</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">59</span><span class="hljs-symbol">:</span><span class="hljs-number">50</span> PM MDT<span class="hljs-params">|36
2019/08/06 4:32:49 PM MDT|</span><span class="hljs-number">42</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span><span class="hljs-symbol">:</span><span class="hljs-number">56</span> PM MDT<span class="hljs-params">|43
2019/08/06 6:43:56 PM MDT|</span><span class="hljs-number">52</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">47</span><span class="hljs-symbol">:</span><span class="hljs-number">30</span> PM MDT<span class="hljs-params">|53
2019/08/06 11:57:12 PM MDT|</span><span class="hljs-number">57</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">05</span><span class="hljs-symbol">:</span><span class="hljs-number">40</span> PM MDT<span class="hljs-params">|69
2019/08/06 9:12:18 PM MDT|</span><span class="hljs-number">73</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">17</span><span class="hljs-symbol">:</span><span class="hljs-number">14</span> PM MDT<span class="hljs-params">|107
2019/08/06 4:19:18 PM MDT|</span><span class="hljs-number">123</span>
<span class="hljs-number">2019</span>/08/<span class="hljs-number">06</span> <span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">54</span><span class="hljs-symbol">:</span><span class="hljs-number">36</span> PM MDT<span class="hljs-params">|124
2019/08/06 4:30:02 PM MDT|</span><span class="hljs-number">999999999999999999</span></code></pre>

<p>The submission with the timestamp corresponding to the minimum value of this table is the timestamp of the
submission with the smallest unique positive integer!</p>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> smallest_int_having <span class="hljs-keyword">AS</span>
<div class="alt solution-4">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-4">  <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">time</span>, smallest <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> smallest <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">COUNT</span>(*) = <span class="hljs-number">1</span>;</div></code></pre>


        <button id="solution-4" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>Use Ok to test your code:</p><pre><code class="nohighlight">python3 ok -q smallest-int-having</code></pre>


<h1 id="optional-questions">Optional Questions</h1>


<blockquote><p>The following questions are for <strong>extra practice</strong> -- they can be found
in the <a href="https://inst.eecs.berkeley.edu/~cs61a/su19/lab/lab13/lab13_extra.sql">lab13_extra.sql</a> file. It is recommended that
you complete these problems, but you do not need to turn them
in for credit.</p></blockquote>


<h2 id="the-count-aggregator">The COUNT Aggregator</h2>


<p>How many people liked each pet? What is the biggest date chosen this semester?
How many obedient people chose Image 1 for the instructor?
Is there a difference between last semester's average favorite number
and this semester's?</p>

<p>To answer these types of questions, we can bring in SQL aggregation, which
allows us to accumulate values across rows in our SQL database!</p>

<p>In order to perform SQL aggregation, we can group rows in our table by one or more attributes. Once
we have groups, we can aggregate over the groups in our table and find things like:</p>

<ul>
  <li>the maximum value (<code>MAX</code>),</li>
  <li>the minimum value (<code>MIN</code>),</li>
  <li>the number of rows in the group (<code>COUNT</code>),</li>
  <li>the average over all of the values (<code>AVG</code>),</li>
</ul>

<p>and more!
<code>SELECT</code> statements that use aggregation are usually marked by two things: an
aggregate function (<code>MAX</code>, <code>MIN</code>, <code>COUNT</code>, <code>AVG</code>, etc.) and a <code>GROUP BY</code> clause.
<code>GROUP BY [column(s)]</code> groups together rows with the same value in each
column(s).
In this section we will only use <code>COUNT</code>, which will count the number of rows
in each group, but feel free to check out <a href="http://www.sqlcourse2.com/agg_functions.html">this
link</a> for more!</p>

<p>For example, the following query will print out the top 10 favorite numbers with
their respective counts:</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT number, COUNT(*) AS count FROM students GROUP BY number
  ORDER BY count DESC LIMIT <span class="hljs-number">10</span>;
<span class="hljs-number">7</span><span class="hljs-params">|7
2|</span><span class="hljs-number">5</span>
<span class="hljs-number">6</span><span class="hljs-params">|5
12|</span><span class="hljs-number">5</span>
<span class="hljs-number">21</span><span class="hljs-params">|5
27|</span><span class="hljs-number">5</span>
<span class="hljs-number">69</span><span class="hljs-params">|5
99|</span><span class="hljs-number">5</span>
<span class="hljs-number">13</span><span class="hljs-params">|4
19|</span><span class="hljs-number">4</span></code></pre>

<p>This <code>SELECT</code> statement first groups all of the rows in our table <code>students</code> by <code>number</code>. Then, within each
group, we perform aggregation by <code>COUNT</code>ing all the rows. By selecting <code>number</code> and <code>COUNT(*)</code>,
we then can see the highest <code>number</code> and how many students picked that number. We have to order by our <code>COUNT(*)</code>, which is saved in the alias <code>count</code>, by <code>DESC</code>ending order, so our highest count starts at the top, and we limit our result to the top 10.
<br>

</p><h3 class="question" id="q6">Q6: Let's Count</h3>
Let's have some fun with this! For each query below, we created its own table
in <code>lab13_extra.sql</code>, so fill in the corresponding table and run it using Ok.
Try working on this on your own or with a neighbor before toggling to see the
solutions.<p></p>

<blockquote><p><em>Hint:</em> You may find that there isn't a particular attribute you should have
to perform the <code>COUNT</code> aggregation over. If you are only interested in
counting the number of rows in a group, you can just say <code>COUNT(*)</code>.</p></blockquote>

<p>What are the top 10 pets this semester?</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM su19favpets;
dog<span class="hljs-params">|15
cat|</span><span class="hljs-number">9</span>
lion<span class="hljs-params">|4
cheetah|</span><span class="hljs-number">3</span>
golden retriever<span class="hljs-params">|3
pig|</span><span class="hljs-number">3</span>
corgi<span class="hljs-params">|2
horse|</span><span class="hljs-number">2</span>
human<span class="hljs-params">|2
koala|</span><span class="hljs-number">2</span></code></pre>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> su19favpets <span class="hljs-keyword">AS</span>
<div class="alt solution-5">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-5">  <span class="hljs-keyword">SELECT</span> pet, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">AS</span> <span class="hljs-keyword">count</span> <span class="hljs-keyword">FROM</span> students
    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> pet <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">count</span> <span class="hljs-keyword">DESC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span>;</div></code></pre>


        <button id="solution-5" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>How many people marked exactly the word 'dog' as their ideal pet this semester?</p>

<pre><code class="hljs shell"><span class="hljs-meta">sqlite&gt;</span><span class="bash"> SELECT * FROM su19dog;</span>
dog|15</code></pre>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> su19dog <span class="hljs-keyword">AS</span>
<div class="alt solution-6">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-6">  <span class="hljs-keyword">SELECT</span> pet, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> pet = <span class="hljs-string">'dog'</span>;</div></code></pre>


        <button id="solution-6" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>We can find the student's favorite for any column (try it yourself in the
interpreter), but let's go back to our Obedience question. Let's see how many
obedient students this semester picked each image of an instructor.  We can
do this by selecting only the rows that have <code>seven = '7'</code> then <code>GROUP BY instructor</code>,
and finally we can <code>COUNT</code> them.</p>

<pre><code class="hljs ruby">sqlite&gt; SELECT * FROM obedienceimages;
<span class="hljs-number">7</span><span class="hljs-params">|1|</span><span class="hljs-number">6</span>
<span class="hljs-number">7</span><span class="hljs-params">|2|</span><span class="hljs-number">7</span>
<span class="hljs-number">7</span><span class="hljs-params">|4|</span><span class="hljs-number">3</span>
<span class="hljs-number">7</span><span class="hljs-params">|5|</span><span class="hljs-number">7</span>
<span class="hljs-number">7</span><span class="hljs-params">|6|</span><span class="hljs-number">11</span></code></pre>



<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> obedienceimages <span class="hljs-keyword">AS</span>
<div class="alt solution-7">  <span class="hljs-keyword">SELECT</span> <span class="hljs-string">"REPLACE THIS LINE WITH YOUR SOLUTION"</span>;
</div><div class="solution solution-7">  <span class="hljs-keyword">SELECT</span> seven, instructor, <span class="hljs-keyword">COUNT</span>(*) <span class="hljs-keyword">FROM</span> students <span class="hljs-keyword">WHERE</span> seven = <span class="hljs-string">'7'</span>
    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> instructor;</div></code></pre>


        <button id="solution-7" class="btn btn-outline btn-lg solutiontoggle solution">
        Toggle Solution<noscript> (enable JavaScript)</noscript>
        </button>
        

<p>The possibilities are endless, so have fun experimenting!</p>

<p>Use Ok to test your code:</p><pre><code class="nohighlight">python3 ok -q lets-count</code></pre>


<h1 id="troubleshooting-advanced-sqlite">Troubleshooting/Advanced SQLite</h1>



<h2 id="troubleshooting">Troubleshooting</h2>


<p>Python already comes with a built-in SQLite database engine to process SQL.
However, it doesn't come with a "shell" to let you interact with it from the terminal.
Because of this, until now, you have been using a simplified SQLite shell written by us.
However, you may find the shell is old, buggy, or lacking in features.
In that case, you may want to download and use the official SQLite executable.</p>

<p>If running <code>python3 sqlite_shell.py</code> didn't work, you can download a precompiled sqlite directly by following the following instructions and then use <code>sqlite3</code> and <code>./sqlite3</code> instead of <code>python3 sqlite_shell.py</code> based on which is specified for your platform.</p>


        <button id="toggle-1" class="btn btn-outline btn-lg alwaystoggle toggle" style="display: inline-block;">
        Setup<noscript> (enable JavaScript)</noscript>
        </button>
        <div class="solution toggle-1">
Another way to start using SQLite is to download a precompiled
binary from the <a href="http://www.sqlite.org/download.html">SQLite website</a>.
The latest version of SQLite at the time of writing is 3.28.0, but you
can check for additional updates on the website.

<p>However, before proceeding, please remove (or rename) any SQLite executables
(<code>sqlite3</code>, <code>sqlite_shell.py</code>, and the like)
from the current folder, or they may conflict with the official one you download below.
Similarly, if you wish to switch back later,
please remove or rename the one you downloaded and restore the files you removed.</p>


<h3 id="windows">Windows</h3>


<ol>
  <li>Visit the download page linked above and navigate to the section
  Precompiled Binaries for Windows. Click on the link
  <strong>sqlite-tools-win32-x86-*.zip</strong> to download the binary.</li>
  <li>Unzip the file. There should be a <code>sqlite3.exe</code> file in the
  directory after extraction.</li>
  <li><p>Navigate to the folder containing the <code>sqlite3.exe</code> file and check
  that the version is at least 3.8.3:</p>

<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> path/to/sqlite</span>
<span class="hljs-meta">$</span><span class="bash"> ./sqlite3 --version</span>
3.12.1 2016-04-08 15:09:49 fe7d3b75fe1bde41511b323925af8ae1b910bc4d</code></pre></li>
</ol>


<h3 id="macos-yosemite-10-10-or-newer">macOS Yosemite (10.10) or newer</h3>


<p>SQLite comes pre-installed. Check that you have a version that's greater than 3.8.3:</p>

<pre><code class="hljs ruby">    $ sqlite3
    SQLite version <span class="hljs-number">3.8</span>.<span class="hljs-number">10.2</span></code></pre>


<h3 id="mac-os-x-mavericks-10-9-or-older">Mac OS X Mavericks (10.9) or older</h3>


<p>SQLite comes pre-installed, but it is the wrong version.</p>

<ol>
  <li>Visit the download page linked above and navigate to the section
  <strong>Precompiled Binaries for Mac OS X (x86)</strong>. Click on
  the link <strong>sqlite-tools-osx-x86-*.zip</strong> to download the
  binary.</li>
  <li>Unzip the file. There should be a <code>sqlite3</code> file in the directory
  after extraction.</li>
  <li><p>Navigate to the folder containing the <code>sqlite3</code> file and check that
  the version is at least 3.8.3:</p>

<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> path/to/sqlite</span>
<span class="hljs-meta">$</span><span class="bash"> ./sqlite3 --version</span>
3.12.1 2016-04-08 15:09:49 fe7d3b75fe1bde41511b323925af8ae1b910bc4d</code></pre></li>
</ol>


<h3 id="ubuntu">Ubuntu</h3>


<p>The easiest way to use SQLite on Ubuntu is to install it straight from
the native repositories (the version will be slightly behind the most
recent release):</p>

<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo apt install sqlite3</span>
<span class="hljs-meta">$</span><span class="bash"> sqlite3 --version</span>
3.8.6 2014-08-15 11:46:33 9491ba7d738528f168657adb43a198238abde19e</code></pre>

</div>

  </div>

  <div class="col-md-3 sticky">
    <nav class="hidden-print hidden-sm hidden-xs sidebar">
      <ul class="nav nav-stacked noselect">
  <li class=""><a href="#sqlite">SQLite</a></li>
  <ul class="nav nav-stacked noselect">
    <li class=""><a href="#usage">Usage</a></li>
  </ul>
  <li class=""><a href="#topics">Topics</a></li>
  <ul class="nav nav-stacked noselect">
    <li class=""><a href="#sql-basics">SQL Basics</a></li>
    <ul class="nav nav-stacked noselect">
      <li class=""><a href="#creating-tables">Creating Tables</a></li>
      <li class=""><a href="#selecting-from-tables">Selecting From Tables</a></li>
      <li class=""><a href="#sql-operators">SQL operators</a></li>
    </ul>
    <li class=""><a href="#joins">Joins</a></li>
  </ul>
  <li class=""><a href="#required-questions">Required Questions</a></li>
  <ul class="nav nav-stacked noselect">
    <li class=""><a href="#getting-to-know-your-fellow-61a-students">Getting to Know Your Fellow 61A Students</a></li>
    <ul class="nav nav-stacked noselect">
      <li class=""><a href="#q1">Q1: What Would SQL print?</a></li>
      <li class=""><a href="#q2">Q2: Obedience</a></li>
      <li class=""><a href="#q3">Q3: The Smallest Unique Positive Integer</a></li>
      <li class=""><a href="#q4">Q4: Matchmaker, Matchmaker</a></li>
      <li><a href="#q5">Q5: The Smallest Unique Positive Integer</a></li>
    </ul>
  </ul>
  <li><a href="#optional-questions">Optional Questions</a></li>
  <ul class="nav nav-stacked noselect">
    <li><a href="#the-count-aggregator">The COUNT Aggregator</a></li>
    <ul class="nav nav-stacked noselect">
      <li><a href="#q6">Q6: Let's Count</a></li>
    </ul>
  </ul>
  <li><a href="#troubleshooting-advanced-sqlite">Troubleshooting/Advanced SQLite</a></li>
  <ul class="nav nav-stacked noselect">
    <li><a href="#troubleshooting">Troubleshooting</a></li>
    <ul class="nav nav-stacked noselect">
      <li><a href="#windows">Windows</a></li>
      <li><a href="#macos-yosemite-10-10-or-newer">macOS Yosemite (10.10) or newer</a></li>
      <li><a href="#mac-os-x-mavericks-10-9-or-older">Mac OS X Mavericks (10.9) or older</a></li>
      <li><a href="#ubuntu">Ubuntu</a></li>
    </ul>
  </ul>
</ul>
    </nav>
  </div>
</div>

    </main>

    <footer class="container">
      <div class="row text-center">
        <div class="col col-sm-4">
          <h3><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/">CS 61A</a></h3>
          <ul class="nav nav-pills nav-stacked">
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/weekly.html">Weekly Schedule</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/office-hours.html">Office Hours</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/staff.html">Staff</a></li>
          </ul>
        </div>
        <div class="col col-sm-4">
          <h3><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/resources.html">Resources</a></h3>
          <ul class="nav nav-pills nav-stacked">
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/studying.html">Studying Guide</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/debugging.html">Debugging Guide</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/composition.html">Composition Guide</a></li>
          </ul>
        </div>
        <div class="col col-sm-4">
          <h3><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/about.html">Policies</a></h3>
          <ul class="nav nav-pills nav-stacked">
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/about.html#assignments">Assignments</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/about.html#exams">Exams</a></li>
            <li><a href="https://inst.eecs.berkeley.edu/~cs61a/su19/articles/about.html#grading">Grading</a></li>
          </ul>
        </div>
      </div>
    </footer>

    


<script>
  $('.sidebar ul').addClass('nav nav-stacked noselect');
  $('body').scrollspy({
    target: '.sidebar',
    offset: 40
  });
</script>


<script type="text/javascript" src="index_files/config.js"></script>
<script>
/*
This code is duplicated in lab-check-in.html. Doesn't work if we move it to a separate
file because of JQuery document ready concurrency issues.
*/
$(function() {
  var staging_domains = ['staging.cs61a.org', 'solutions.cs61a.org', 'localhost', '127.0.0.1'];
  var host = window.location.hostname;
  var staging = staging_domains.indexOf(host) != -1;
  staging = staging || (host.endsWith('.pullrequests.cs61a.org') && !host.startsWith('last-build.'));

  var after_due_date = new Date("8/12/2019") < new Date();
  var before_end_date = new Date() <= new Date(endDate);
  var release_solutions = (staging || after_due_date) && before_end_date;

  if (release_solutions) {
    $('.solutiontoggle').css('display', 'inline-block');
    $('.solutiontoggle').click(function() {
      var solution_id = $(this).attr('id');
      $('div.' + solution_id).slideToggle(600);
    });
  }
  $('.alwaystoggle').css('display', 'inline-block');
  $('.alwaystoggle').click(function() {
    var solution_id = $(this).attr('id');
    $('div.' + solution_id).slideToggle(600);
  });
});
</script>


  
</body></html>